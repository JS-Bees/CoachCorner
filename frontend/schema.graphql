### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Booking {
  active: Boolean!
  additionalNotes: String!
  bookingSlots: [BookingSlot!]!
  coach: Coach!
  coachId: Int!
  coachee: Coachee!
  coacheeId: Int!
  createdAt: DateTime!
  id: Int!
  serviceType: String!
  status: BookingStatus!
  updatedAt: DateTime!
}

type BookingSlot {
  active: Boolean!
  booking: Booking!
  bookingId: Int!
  createdAt: DateTime!
  date: DateTime!
  endTime: DateTime!
  id: Int!
  startTime: DateTime!
  updatedAt: DateTime!
}

enum BookingStatus {
  CANCELLED
  COMPLETED
  CONFIRMED
  PENDING
}

type Coach {
  active: Boolean!
  affiliations: String!
  bio: String!
  birthday: DateTime!
  bookings: [Booking!]!
  coachingRelationships: [CoachingRelationship!]!
  createdAt: DateTime!
  email: String!
  firstName: String!
  games: [Games!]!
  hobbies: [Hobbies!]!
  id: Int!
  isCoach: Boolean!
  lastName: String!
  mantra: String!
  moviesGenres: [MovieGenres!]!
  password: String!
  profilePicture: String!
  reviews: [Review!]!
  sport: Sport!
  updatedAt: DateTime!
  workplaceAddress: String!
}

type Coachee {
  active: Boolean!
  address: String!
  affiliations: String!
  bio: String!
  birthday: DateTime!
  bookings: [Booking!]!
  coachingRelationships: [CoachingRelationship!]!
  createdAt: DateTime!
  email: String!
  firstName: String!
  games: [Games!]!
  hobbies: [Hobbies!]!
  id: Int!
  isCoach: Boolean!
  lastName: String!
  mantra: String!
  moviesGenres: [MovieGenres!]!
  password: String!
  profilePicture: String!
  reviews: [Review!]!
  updatedAt: DateTime!
}

type CoachingRelationship {
  active: Boolean!
  coach: Coach!
  coachId: Int!
  coachee: Coachee!
  coacheeId: Int!
  createdAt: DateTime!
  id: Int!
  messagingStarted: Boolean!
  updatedAt: DateTime!
}

input CreateBookingInput {
  additionalNotes: String!
  coachId: Int!
  coacheeId: Int!
  serviceType: String!
  status: BookingStatus!
}

input CreateBookingSlotInput {
  date: DateTime!
  endTime: DateTime!
  startTime: DateTime!
}

input CreateCoachInput {
  affiliations: String!
  bio: String!
  birthday: DateTime!
  email: String!
  firstName: String!
  games: [Games!]!
  hobbies: [Hobbies!]!
  lastName: String!
  mantra: String!
  moviesGenres: [MovieGenres!]!
  password: String!
  profilePicture: String!
  sport: Sport!
  workplaceAddress: String!
}

input CreateCoacheeInput {
  address: String!
  affiliations: String!
  bio: String!
  birthday: DateTime!
  email: String!
  firstName: String!
  games: [Games!]!
  hobbies: [Hobbies!]!
  lastName: String!
  mantra: String!
  moviesGenres: [MovieGenres!]!
  password: String!
  profilePicture: String!
}

input CreateCoachingRelationshipInput {
  coachId: Int!
  coacheeId: Int!
}

input CreateReviewInput {
  coachId: Int!
  coacheeId: Int!
  comment: String!
  starRating: Int!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum Games {
  ARKNIGHTS
  AZURELANE
  CALLOFDUTY
  CANDYCRUSH
  CLASHOFCLANS
  COUNTERSTRIKE
  DOTA
  GENSHINIMPACT
  LOL
  MINECRAFT
  MOBILELEGENDS
  OVERWATCH
  PUBG
  STREETFIGHTER
  TEKKEN
  VALORANT
}

enum Hobbies {
  BAKING
  COOKING
  DANCING
  HIKING
  PAINTING
  PHOTOGRAPHY
  READING
  SINGING
  TRAVELLING
  WRITING
}

input MessagingStartedInput {
  messagingStarted: Boolean!
}

enum MovieGenres {
  ACTION
  ADVENTURE
  ANIME
  COMEDY
  DOCUMENTARY
  DRAMA
  FANTASY
  HORROR
  KDRAMA
  MUSICAL
  MYSTERY
  ROMANCE
  SCIFI
  THRILLER
}

type Mutation {
  createBooking(input: CreateBookingInput!, slotsInput: [CreateBookingSlotInput!]!): Booking!
  createCoach(input: CreateCoachInput!): Coach!
  createCoachee(input: CreateCoacheeInput!): Coachee!
  createCoachingRelationship(input: CreateCoachingRelationshipInput!): CoachingRelationship!
  createReview(input: CreateReviewInput!): Review!
  updateBookingStatus(id: Int!, input: UpdateBookingStatusInput!): Booking!
  updateCoachProfile(id: Int!, input: UpdateCoachProfileInput!): Coach!
  updateCoacheeProfile(id: Int!, input: UpdateCoacheeProfileInput!): Coachee!
  updateCoachingRelationshipActiveStatus(active: Boolean!, id: Int!): CoachingRelationship!
  updateMessagingStartedCoachingRelationship(id: Int!, input: MessagingStartedInput!): CoachingRelationship!
}

type Query {
  coachees: [Coachee!]!
  coaches: [Coach!]!
  findBookingByID(bookingID: Int!): Booking!
  findBookingsByStatusAndCoachID(coachID: Int!, status: BookingStatus!): [Booking!]!
  findBookingsByStatusAndCoacheeID(coacheeID: Int!, status: BookingStatus!): [Booking!]!
  findCoachByEmailAndPassword(email: String!, password: String!): Coach!
  findCoachByID(userID: Int!): Coach!
  findCoacheeByEmailAndPassword(email: String!, password: String!): Coachee!
  findCoacheeByID(userID: Int!): Coachee!
  findCoachesBySport(sport: Sport!): [Coach!]!
  findUnaddedCoachesBySport(coacheeID: Int!, sport: Sport!): [Coach!]!
}

type Review {
  active: Boolean!
  coach: Coach!
  coachId: Int!
  coachee: Coachee!
  coacheeId: Int!
  comment: String!
  createdAt: DateTime!
  id: Int!
  starRating: Int!
  updatedAt: DateTime!
}

enum Sport {
  BADMINTON
  BASKETBALL
  SOCCER
  SWIMMING
  VOLLEYBALL
}

input UpdateBookingStatusInput {
  status: BookingStatus!
}

input UpdateCoachProfileInput {
  affiliations: String!
  bio: String!
  mantra: String!
  profilePicture: String!
  workplaceAddress: String!
}

input UpdateCoacheeProfileInput {
  address: String!
  affiliations: String!
  bio: String!
  mantra: String!
  profilePicture: String!
}