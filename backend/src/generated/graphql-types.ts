/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CreateCoachInput: { // input type
    birthday: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    firstName: string; // String!
    games: NexusGenEnums['Games'][]; // [Games!]!
    hobbies: NexusGenEnums['Hobbies'][]; // [Hobbies!]!
    lastName: string; // String!
    moviesGenres: NexusGenEnums['MovieGenres'][]; // [MovieGenres!]!
    password: string; // String!
    sport: NexusGenEnums['Sport']; // Sport!
    workplaceAddress: string; // String!
  }
  CreateCoacheeInput: { // input type
    address: string; // String!
    birthday: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    firstName: string; // String!
    games: NexusGenEnums['Games'][]; // [Games!]!
    hobbies: NexusGenEnums['Hobbies'][]; // [Hobbies!]!
    lastName: string; // String!
    moviesGenres: NexusGenEnums['MovieGenres'][]; // [MovieGenres!]!
    password: string; // String!
  }
}

export interface NexusGenEnums {
  BookingStatus: "CANCELLED" | "COMPLETED" | "CONFIRMED" | "PENDING"
  Games: "ARKNIGHTS" | "AZURELANE" | "CALLOFDUTY" | "CANDYCRUSH" | "CLASHOFCLANS" | "COUNTERSTRIKE" | "DOTA" | "GENSHINIMPACT" | "LOL" | "MINECRAFT" | "MOBILELEGENDS" | "OVERWATCH" | "PUBG" | "STREETFIGHTER" | "TEKKEN" | "VALORANT"
  Hobbies: "BAKING" | "COOKING" | "DANCING" | "HIKING" | "PAINTING" | "PHOTOGRAPHY" | "READING" | "SINGING" | "TRAVELLING" | "WRITING"
  MovieGenres: "ACTION" | "ADVENTURE" | "ANIME" | "COMEDY" | "DOCUMENTARY" | "DRAMA" | "FANTASY" | "HORROR" | "KDRAMA" | "MUSICAL" | "MYSTERY" | "ROMANCE" | "SCIFI" | "THRILLER"
  Sport: "BADMINTON" | "BASKETBALL" | "SOCCER" | "SWIMMING" | "VOLLEYBALL"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Booking: { // root type
    active: boolean; // Boolean!
    additionalNotes?: string | null; // String
    coachId: number; // Int!
    coachName: string; // String!
    coacheeId: number; // Int!
    coacheeName: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    serviceType: string; // String!
    status: NexusGenEnums['BookingStatus']; // BookingStatus!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  BookingSlot: { // root type
    bookingId: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    date: NexusGenScalars['DateTime']; // DateTime!
    endTime: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    startTime: NexusGenScalars['DateTime']; // DateTime!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Coach: { // root type
    active: boolean; // Boolean!
    affiliations?: string | null; // String
    bio?: string | null; // String
    birthday: NexusGenScalars['DateTime']; // DateTime!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    firstName: string; // String!
    games: NexusGenEnums['Games'][]; // [Games!]!
    hobbies: NexusGenEnums['Hobbies'][]; // [Hobbies!]!
    id: number; // Int!
    isCoach: boolean; // Boolean!
    lastName: string; // String!
    moviesGenres: NexusGenEnums['MovieGenres'][]; // [MovieGenres!]!
    password: string; // String!
    profilePicture?: string | null; // String
    sport: NexusGenEnums['Sport']; // Sport!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    workplaceAddress: string; // String!
  }
  Coachee: { // root type
    active: boolean; // Boolean!
    address: string; // String!
    affiliations?: string | null; // String
    bio?: string | null; // String
    birthday: NexusGenScalars['DateTime']; // DateTime!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    firstName: string; // String!
    games: NexusGenEnums['Games'][]; // [Games!]!
    hobbies: NexusGenEnums['Hobbies'][]; // [Hobbies!]!
    id: number; // Int!
    isCoach: boolean; // Boolean!
    lastName: string; // String!
    moviesGenres: NexusGenEnums['MovieGenres'][]; // [MovieGenres!]!
    password: string; // String!
    profilePicture?: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  CoachingRelationship: { // root type
    coachId: number; // Int!
    coacheeId: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Mutation: {};
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Booking: { // field return type
    active: boolean; // Boolean!
    additionalNotes: string | null; // String
    bookingSlots: NexusGenRootTypes['BookingSlot'][]; // [BookingSlot!]!
    coach: NexusGenRootTypes['Coach']; // Coach!
    coachId: number; // Int!
    coachName: string; // String!
    coachee: NexusGenRootTypes['Coachee']; // Coachee!
    coacheeId: number; // Int!
    coacheeName: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    serviceType: string; // String!
    status: NexusGenEnums['BookingStatus']; // BookingStatus!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  BookingSlot: { // field return type
    booking: NexusGenRootTypes['Booking']; // Booking!
    bookingId: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    date: NexusGenScalars['DateTime']; // DateTime!
    endTime: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    startTime: NexusGenScalars['DateTime']; // DateTime!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Coach: { // field return type
    active: boolean; // Boolean!
    affiliations: string | null; // String
    bio: string | null; // String
    birthday: NexusGenScalars['DateTime']; // DateTime!
    bookings: NexusGenRootTypes['Booking'][]; // [Booking!]!
    coachingRelationships: NexusGenRootTypes['CoachingRelationship'][]; // [CoachingRelationship!]!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    firstName: string; // String!
    games: NexusGenEnums['Games'][]; // [Games!]!
    hobbies: NexusGenEnums['Hobbies'][]; // [Hobbies!]!
    id: number; // Int!
    isCoach: boolean; // Boolean!
    lastName: string; // String!
    moviesGenres: NexusGenEnums['MovieGenres'][]; // [MovieGenres!]!
    password: string; // String!
    profilePicture: string | null; // String
    sport: NexusGenEnums['Sport']; // Sport!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    workplaceAddress: string; // String!
  }
  Coachee: { // field return type
    active: boolean; // Boolean!
    address: string; // String!
    affiliations: string | null; // String
    bio: string | null; // String
    birthday: NexusGenScalars['DateTime']; // DateTime!
    bookings: NexusGenRootTypes['Booking'][]; // [Booking!]!
    coachingRelationships: NexusGenRootTypes['CoachingRelationship'][]; // [CoachingRelationship!]!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    firstName: string; // String!
    games: NexusGenEnums['Games'][]; // [Games!]!
    hobbies: NexusGenEnums['Hobbies'][]; // [Hobbies!]!
    id: number; // Int!
    isCoach: boolean; // Boolean!
    lastName: string; // String!
    moviesGenres: NexusGenEnums['MovieGenres'][]; // [MovieGenres!]!
    password: string; // String!
    profilePicture: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  CoachingRelationship: { // field return type
    coach: NexusGenRootTypes['Coach']; // Coach!
    coachId: number; // Int!
    coachee: NexusGenRootTypes['Coachee']; // Coachee!
    coacheeId: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Mutation: { // field return type
    createCoach: NexusGenRootTypes['Coach'] | null; // Coach
    createCoachee: NexusGenRootTypes['Coachee'] | null; // Coachee
  }
  Query: { // field return type
    coachees: Array<NexusGenRootTypes['Coachee'] | null> | null; // [Coachee]
    coaches: Array<NexusGenRootTypes['Coach'] | null> | null; // [Coach]
    findCoachByEmailAndPassword: NexusGenRootTypes['Coach'] | null; // Coach
    findCoacheeByEmailAndPassword: NexusGenRootTypes['Coachee'] | null; // Coachee
  }
}

export interface NexusGenFieldTypeNames {
  Booking: { // field return type name
    active: 'Boolean'
    additionalNotes: 'String'
    bookingSlots: 'BookingSlot'
    coach: 'Coach'
    coachId: 'Int'
    coachName: 'String'
    coachee: 'Coachee'
    coacheeId: 'Int'
    coacheeName: 'String'
    createdAt: 'DateTime'
    id: 'Int'
    serviceType: 'String'
    status: 'BookingStatus'
    updatedAt: 'DateTime'
  }
  BookingSlot: { // field return type name
    booking: 'Booking'
    bookingId: 'Int'
    createdAt: 'DateTime'
    date: 'DateTime'
    endTime: 'DateTime'
    id: 'Int'
    startTime: 'DateTime'
    updatedAt: 'DateTime'
  }
  Coach: { // field return type name
    active: 'Boolean'
    affiliations: 'String'
    bio: 'String'
    birthday: 'DateTime'
    bookings: 'Booking'
    coachingRelationships: 'CoachingRelationship'
    createdAt: 'DateTime'
    email: 'String'
    firstName: 'String'
    games: 'Games'
    hobbies: 'Hobbies'
    id: 'Int'
    isCoach: 'Boolean'
    lastName: 'String'
    moviesGenres: 'MovieGenres'
    password: 'String'
    profilePicture: 'String'
    sport: 'Sport'
    updatedAt: 'DateTime'
    workplaceAddress: 'String'
  }
  Coachee: { // field return type name
    active: 'Boolean'
    address: 'String'
    affiliations: 'String'
    bio: 'String'
    birthday: 'DateTime'
    bookings: 'Booking'
    coachingRelationships: 'CoachingRelationship'
    createdAt: 'DateTime'
    email: 'String'
    firstName: 'String'
    games: 'Games'
    hobbies: 'Hobbies'
    id: 'Int'
    isCoach: 'Boolean'
    lastName: 'String'
    moviesGenres: 'MovieGenres'
    password: 'String'
    profilePicture: 'String'
    updatedAt: 'DateTime'
  }
  CoachingRelationship: { // field return type name
    coach: 'Coach'
    coachId: 'Int'
    coachee: 'Coachee'
    coacheeId: 'Int'
    createdAt: 'DateTime'
    id: 'Int'
    updatedAt: 'DateTime'
  }
  Mutation: { // field return type name
    createCoach: 'Coach'
    createCoachee: 'Coachee'
  }
  Query: { // field return type name
    coachees: 'Coachee'
    coaches: 'Coach'
    findCoachByEmailAndPassword: 'Coach'
    findCoacheeByEmailAndPassword: 'Coachee'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createCoach: { // args
      input: NexusGenInputs['CreateCoachInput']; // CreateCoachInput!
    }
    createCoachee: { // args
      input: NexusGenInputs['CreateCoacheeInput']; // CreateCoacheeInput!
    }
  }
  Query: {
    findCoachByEmailAndPassword: { // args
      email: string; // String!
      password: string; // String!
    }
    findCoacheeByEmailAndPassword: { // args
      email: string; // String!
      password: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}