/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  BookingStatus: "CANCELLED" | "COMPLETED" | "CONFIRMED" | "PENDING"
  Games: "ARKNIGHTS" | "AZURELANE" | "CALLOFDUTY" | "CANDYCRUSH" | "CLASHOFCLANS" | "COUNTERSTRIKE" | "DOTA" | "GENSHINIMPACT" | "LOL" | "MINECRAFT" | "MOBILELEGENDS" | "OVERWATCH" | "PUBG" | "STREETFIGHTER" | "TEKKEN" | "VALORANT"
  Hobbies: "BAKING" | "COOKING" | "DANCING" | "HIKING" | "PAINTING" | "PHOTOGRAPHY" | "READING" | "SINGING" | "TRAVELLING" | "WRITING"
  MovieGenres: "ACTION" | "ADVENTURE" | "ANIME" | "COMEDY" | "DOCUMENTARY" | "DRAMA" | "FANTASY" | "HORROR" | "KDRAMA" | "MUSICAL" | "MYSTERY" | "ROMANCE" | "SCIFI" | "THRILLER"
  Sport: "BADMINTON" | "BASKETBALL" | "SOCCER" | "SWIMMING" | "VOLLEYBALL"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Coach: { // root type
    email: string; // String!
    firstName: string; // String!
    id: number; // Int!
    lastName: string; // String!
    sport: NexusGenEnums['Sport']; // Sport!
  }
  Coachee: { // root type
    firstName: string; // String!
    id: number; // Int!
    lastName: string; // String!
  }
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Coach: { // field return type
    email: string; // String!
    firstName: string; // String!
    id: number; // Int!
    lastName: string; // String!
    sport: NexusGenEnums['Sport']; // Sport!
  }
  Coachee: { // field return type
    firstName: string; // String!
    id: number; // Int!
    lastName: string; // String!
  }
  Query: { // field return type
    coachees: NexusGenRootTypes['Coachee'][]; // [Coachee!]!
    coaches: NexusGenRootTypes['Coach'][]; // [Coach!]!
  }
}

export interface NexusGenFieldTypeNames {
  Coach: { // field return type name
    email: 'String'
    firstName: 'String'
    id: 'Int'
    lastName: 'String'
    sport: 'Sport'
  }
  Coachee: { // field return type name
    firstName: 'String'
    id: 'Int'
    lastName: 'String'
  }
  Query: { // field return type name
    coachees: 'Coachee'
    coaches: 'Coach'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}