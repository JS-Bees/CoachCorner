import { queryField, nullable, list, objectType } from 'nexus';
// nullable is imported since the default is nonNullable in index.ts

import { Person as PersonType } from 'nexus-prisma';
import { Coach as CoachType } from 'nexus-prisma';

import { PrismaClient } from '@prisma/client';

const db = new PrismaClient();

// test code doesn't pull from database
// produces Query.hello: String!
export const hello = queryField('hello', {
    type: 'String',
    resolve() {
        return 'Hello World';
    },
});

// produces Query.hi: String!
export const hi = queryField('herro', {
    type: 'String',
    resolve() {
        return 'Hi World';
    },
});
// end of test code

// produces type Person {...}
export const Person = objectType({
    name: 'Person',
    definition(t) {
        // copy types generated by nexus-prisma
        // nexus Prisma generated Person which was renamed to PersonType
        t.field(PersonType.id);
        t.field(PersonType.familyName);
        t.field(PersonType.givenName);
        t.field(PersonType.surveyResults);
    },
});
// (OBJECTTYPE DIFFERS FROM QUERY)

// produces Query.people: [Person!]!
export const people = queryField('people', {
    type: list(Person),
    resolve() {
        return db.person.findMany();
    },
});

export const Coach = objectType({
    name: 'Coach',
    definition(t) {
        t.field(CoachType.id);
        t.field(CoachType.lastName);
        t.field(CoachType.firstName);
        t.field(CoachType.sport);
    },
});

export const coaches = queryField('coaches', {
    type: list(Coach),
    resolve() {
        return db.coach.findMany();
    },
});

//^above works
