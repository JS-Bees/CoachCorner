datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_")
}

generator client {
  provider = "prisma-client-js"
}

generator nexus {
  provider = "nexus-prisma"
}

model User {  
  id                  Int               @id @default(autoincrement()) 
  address             String   
  birthday            DateTime 
  email               String            @unique
  firstName           String            @map("first_name")
  lastName            String            @map("last_name")
  password            String   
  profilePicture      String            @map("profile_picture")
  bio                 String
  userRole            String            @map("user_role")

  coach               Coach?
  userInterests       UserInterest[]    
  tasks               Task[]
  reviews             Review[]
  appointments        Appointment[]
  contacts            Contact[]

  active              Boolean       @default(true)
  createdAt           DateTime      @default(now())   @map("created_at")
  updatedAt           DateTime      @updatedAt        @map("updated_at")

  @@map("users")
}

model Coach {  
  id                     Int               @id @default(autoincrement())
  user                   User              @relation(fields: [userId], references: [id])
  userId                 Int               @unique 
  sports                 String[]
  credential_pictures    String[]  

  reviews                Review[]
  appointments           Appointment[]
  contacts               Contact[]

  active                 Boolean       @default(true)
  createdAt              DateTime      @default(now())   @map("created_at")
  updatedAt              DateTime      @updatedAt        @map("updated_at")

  @@map("coachs")
}



model Interest {
  id                  Int               @id @default(autoincrement()) 
  userInterests        UserInterest[]            

  type                String
  name                String

  active              Boolean       @default(true)
  createdAt           DateTime      @default(now())   @map("created_at")
  updatedAt           DateTime      @updatedAt        @map("updated_at")

  @@map("interests")
}

model UserInterest {
  id                  Int            @id @default(autoincrement()) 
  user                User           @relation(fields: [userId], references: [id])
  userId              Int            @map("user_id")
  interest            Interest       @relation(fields: [interestId], references: [id])
  interestId          Int            @map("interest_id")
  
  active              Boolean       @default(true)
  createdAt           DateTime      @default(now())   @map("created_at")
  updatedAt           DateTime      @updatedAt        @map("updated_at")

  @@map("user_interests")
}



model Task {
  id                  Int               @id @default(autoincrement()) 
  user                User              @relation(fields: [userId], references: [id])
  userId              Int               @map("user_id")
  
  title               String
  description         String
  completionStatus    String            @map("completion_status")
  date                DateTime

  active              Boolean       @default(true)
  createdAt           DateTime      @default(now())   @map("created_at")
  updatedAt           DateTime      @updatedAt        @map("updated_at")

  @@map("tasks")
}


model Review {
  id                  Int               @id @default(autoincrement())
  user                User              @relation(fields: [userId], references: [id]) 
  userId              Int               @map("user_id")
  coach               Coach             @relation(fields: [coachId], references: [id])
  coachId             Int               @map("coach_id")
  starRating          Int               @map("star_rating")
  comment             String
  
  active              Boolean       @default(true)
  createdAt           DateTime      @default(now())   @map("created_at")
  updatedAt           DateTime      @updatedAt        @map("updated_at")

  @@map("reviews")
}

model Appointment {
  id                  Int               @id @default(autoincrement())
  user                User              @relation(fields: [userId], references: [id]) 
  userId              Int               @map("user_id")
  coach               Coach             @relation(fields: [coachId], references: [id])
  coachId             Int               @map("coach_id")
  serviceType         String            @map("service_type")
  additionalNotes     String            @map("additional_notes")
  status              String            

  timeSlots           TimeSlot[]     

  active              Boolean       @default(true)
  createdAt           DateTime      @default(now())   @map("created_at")
  updatedAt           DateTime      @updatedAt        @map("updated_at")

  @@map("bookings")
}

model TimeSlot {
  id                  Int               @id @default(autoincrement())
  appointment         Appointment       @relation(fields: [appointmentId], references: [id]) 
  appointmentId       Int               @map("appointment_id")
  date                DateTime 
  startTime           DateTime          @map("start_time")
  endTime             DateTime          @map("end_time")
  status              String    

  active              Boolean       @default(true)
  createdAt           DateTime      @default(now())   @map("created_at")
  updatedAt           DateTime      @updatedAt        @map("updated_at")

  @@map("time_slots")
}

model Contact {
  id                  Int               @id @default(autoincrement())
  user                User              @relation(fields: [userId], references: [id]) 
  userId              Int               @map("user_id")
  coach               Coach             @relation(fields: [coachId], references: [id])
  coachId             Int               @map("coach_id")
  contactedStatus     Boolean           @map("contacted_status")   @default(false) 

  messages            Message[]

  active              Boolean       @default(true)
  createdAt           DateTime      @default(now())   @map("created_at")
  updatedAt           DateTime      @updatedAt        @map("updated_at")

  @@map("contacts")
}

model Message {
  id                  Int               @id @default(autoincrement())
  contact             Contact           @relation(fields: [contactId], references: [id]) 
  contactId           Int               @map("contact_id")
  content             String

  createdAt           DateTime      @default(now())   @map("created_at")

  @@map("messages")
}
