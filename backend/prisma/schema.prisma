datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nexus {
  provider = "nexus-prisma"
}


model User {
  id                  Int               @id @default(autoincrement()) 
  address             String   
  birthday            DateTime 
  email               String            @unique
  firstName           String            @map("first_name")
  lastName            String            @map("last_name")
  password            String   

  sport               String    
  games               String[]  
  hobbies             String[]  
  moviesGenres        String[]     @map("movies_genres")
  profilePicture      String    @map("profile_picture")

  affiliations        String    
  bio                 String    
  mantra              String    

  bookings            Booking[]  
  coachingRelationships CoachingRelationship[]        @map("coaching_relationships")
  reviews             Review[]   

  isCoach             Boolean       @default(false)   @map("is_coach")
  
  active              Boolean       @default(true)
  createdAt           DateTime      @default(now())   @map("created_at")
  updatedAt           DateTime      @updatedAt        @map("updated_at")

  @map("users")
}

model CoachingRelationship {
  id                Int           @id @default(autoincrement())
  firstUser         User          @relation(fields: [firstUserId], references: [id])
  firstUserId       Int           @map("first_user_id")
  secondUser        User          @relation(fields: [secondUserId], references: [id])
  secondUserId      Int           @map("second_user_id")

  messagingStarted    Boolean     @default(false)
  active              Boolean     @default(true)
  createdAt           DateTime    @default(now())  @map("created_at")
  updatedAt           DateTime    @updatedAt       @map("updated_at")

  @@map("coaching_relationships")
}

model BookingSlot {
  id            Int               @id @default(autoincrement())
  bookingId     Int               @map("booking_id")
  booking       Booking           @relation(fields: [bookingId], references: [id])
  date          DateTime
  startTime     DateTime          @map("start_time")
  endTime       DateTime          @map("end_time")

  active        Boolean           @default(true)
  createdAt     DateTime          @default(now())  @map("created_at")
  updatedAt     DateTime          @updatedAt       @map("updated_at")
 
  @@map("booking_slots")
}

model Booking {
  id                Int             @id @default(autoincrement())
  bookingSlots      BookingSlot[]   @map("booking_slots")
  firstUser         User            @relation(fields: [firstUserId], references: [id])
  firstUserId       Int             @map("first_user_id")
  secondUser        User            @relation(fields: [secondUserId], references: [id])
  secondUserId      Int             @map("second_user_id")
  serviceType       String          @map("service_type")
  status            String      

  additionalNotes   String          @map("additional_notes")

  active            Boolean         @default(true)
  createdAt         DateTime        @default(now())  @map("created_at")
  updatedAt         DateTime        @updatedAt       @map("updated_at")

  @@map("bookings")
}

model Review {
  id                Int             @id @default(autoincrement())
  starRating        Int             @map("star_rating")
  comment           String    
  firstUser         User            @relation(fields: [firstUserId], references: [id])
  firstUserId       Int             @map("first_user_id")
  secondUser        User            @relation(fields: [secondUserId], references: [id])
  secondUserId      Int             @map("second_user_id")

  active            Boolean         @default(true)
  createdAt         DateTime        @default(now())   @map("created_at")
  updatedAt         DateTime        @updatedAt        @map("updated_at")
  
  @@map("reviews")
}
